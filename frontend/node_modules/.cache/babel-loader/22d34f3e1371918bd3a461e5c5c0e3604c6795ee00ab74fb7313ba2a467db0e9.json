{"ast":null,"code":"var _jsxFileName = \"E:\\\\Shafiq\\\\Routing\\\\frontend\\\\src\\\\pages\\\\Event.jsx\",\n  _s = $RefreshSig$();\nimport { useLoaderData } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  const events = data.events; // Assuming the API returns { events: [...] }\n\n  return /*#__PURE__*/_jsxDEV(EventsList, {\n    events: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 10\n  }, this);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nexport async function loader() {\n  try {\n    const response = await fetch('http://localhost:8080/eventss'); // Ensure backend is running here\n\n    if (!response.ok) {\n      throw new Response(JSON.stringify({\n        message: 'Could not fetch events!',\n        status: response.status\n      }), {\n        status: 500\n      });\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching events:', error);\n    throw new Response(JSON.stringify({\n      message: 'Server is unreachable!'\n    }), {\n      status: 500\n    });\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","data","events","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","response","fetch","ok","Response","JSON","stringify","message","status","json","error","console","$RefreshReg$"],"sources":["E:/Shafiq/Routing/frontend/src/pages/Event.jsx"],"sourcesContent":["import { useLoaderData } from 'react-router-dom';\r\nimport EventsList from '../components/EventsList';\r\n\r\nfunction EventsPage() {\r\n  const data = useLoaderData();\r\n  const events = data.events; // Assuming the API returns { events: [...] }\r\n\r\n  return <EventsList events={events} />;\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nexport async function loader() {\r\n  try {\r\n    const response = await fetch('http://localhost:8080/eventss'); // Ensure backend is running here\r\n\r\n    if (!response.ok) {\r\n      throw new Response(\r\n        JSON.stringify({ message: 'Could not fetch events!', status: response.status }),\r\n        { status: 500 }\r\n      );\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Error fetching events:', error);\r\n    throw new Response(JSON.stringify({ message: 'Server is unreachable!' }), { status: 500 });\r\n  }\r\n}\r\n"],"mappings":";;AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAChD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,IAAI,GAAGN,aAAa,CAAC,CAAC;EAC5B,MAAMO,MAAM,GAAGD,IAAI,CAACC,MAAM,CAAC,CAAC;;EAE5B,oBAAOJ,OAAA,CAACF,UAAU;IAACM,MAAM,EAAEA;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACvC;AAACN,EAAA,CALQD,UAAU;EAAA,QACJJ,aAAa;AAAA;AAAAY,EAAA,GADnBR,UAAU;AAOnB,eAAeA,UAAU;AAEzB,OAAO,eAAeS,MAAMA,CAAA,EAAG;EAC7B,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,CAAC,CAAC,CAAC;;IAE/D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,QAAQ,CAChBC,IAAI,CAACC,SAAS,CAAC;QAAEC,OAAO,EAAE,yBAAyB;QAAEC,MAAM,EAAEP,QAAQ,CAACO;MAAO,CAAC,CAAC,EAC/E;QAAEA,MAAM,EAAE;MAAI,CAChB,CAAC;IACH;IAEA,MAAMf,IAAI,GAAG,MAAMQ,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClC,OAAOhB,IAAI;EACb,CAAC,CAAC,OAAOiB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAM,IAAIN,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAE;IAAyB,CAAC,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EAC5F;AACF;AAAC,IAAAT,EAAA;AAAAa,YAAA,CAAAb,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}