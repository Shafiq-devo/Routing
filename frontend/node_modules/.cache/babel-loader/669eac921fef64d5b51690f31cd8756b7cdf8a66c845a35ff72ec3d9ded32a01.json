{"ast":null,"code":"var _jsxFileName = \"E:\\\\Shafiq\\\\Routing\\\\frontend\\\\src\\\\pages\\\\Error.jsx\",\n  _s = $RefreshSig$();\nimport PageContent from \"../components/PageContent\";\nimport { useRouteError } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ErrorShowing() {\n  _s();\n  const error = useRouteError(); // ✅ Call the hook properly\n\n  let title = \"Could not fetch data\";\n  let message = \"Not found!\";\n  if (error.status === 500) {\n    // ✅ Use comparison (===)\n    message = JSON.parse(error.data).message; // ✅ Use existing `message` variable\n  }\n  if (error.status === 500) {\n    // ✅ Use comparison (===)\n    message = JSON.parse(error.data).message; // ✅ Use existing `message` variable\n  }\n  return /*#__PURE__*/_jsxDEV(PageContent, {\n    title: title,\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n}\n_s(ErrorShowing, \"oAgjgbJzsRXlB89+MoVumxMQqKM=\", false, function () {\n  return [useRouteError];\n});\n_c = ErrorShowing;\nexport default ErrorShowing;\nvar _c;\n$RefreshReg$(_c, \"ErrorShowing\");","map":{"version":3,"names":["PageContent","useRouteError","jsxDEV","_jsxDEV","ErrorShowing","_s","error","title","message","status","JSON","parse","data","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Shafiq/Routing/frontend/src/pages/Error.jsx"],"sourcesContent":["import PageContent from \"../components/PageContent\";\r\nimport { useRouteError } from \"react-router-dom\";\r\n\r\nfunction ErrorShowing() {\r\n    const error = useRouteError();  // ✅ Call the hook properly\r\n\r\n    let title = \"Could not fetch data\";\r\n    let message = \"Not found!\";\r\n\r\n    if (error.status === 500) {  // ✅ Use comparison (===)\r\n        message = JSON.parse(error.data).message; // ✅ Use existing `message` variable\r\n    }\r\n    if (error.status === 500) {  // ✅ Use comparison (===)\r\n        message = JSON.parse(error.data).message; // ✅ Use existing `message` variable\r\n    }\r\n\r\n    return (\r\n        <PageContent title={title}>\r\n            <p>{message}</p>\r\n        </PageContent>\r\n    );\r\n}\r\n\r\nexport default ErrorShowing;\r\n"],"mappings":";;AAAA,OAAOA,WAAW,MAAM,2BAA2B;AACnD,SAASC,aAAa,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,KAAK,GAAGL,aAAa,CAAC,CAAC,CAAC,CAAE;;EAEhC,IAAIM,KAAK,GAAG,sBAAsB;EAClC,IAAIC,OAAO,GAAG,YAAY;EAE1B,IAAIF,KAAK,CAACG,MAAM,KAAK,GAAG,EAAE;IAAG;IACzBD,OAAO,GAAGE,IAAI,CAACC,KAAK,CAACL,KAAK,CAACM,IAAI,CAAC,CAACJ,OAAO,CAAC,CAAC;EAC9C;EACA,IAAIF,KAAK,CAACG,MAAM,KAAK,GAAG,EAAE;IAAG;IACzBD,OAAO,GAAGE,IAAI,CAACC,KAAK,CAACL,KAAK,CAACM,IAAI,CAAC,CAACJ,OAAO,CAAC,CAAC;EAC9C;EAEA,oBACIL,OAAA,CAACH,WAAW;IAACO,KAAK,EAAEA,KAAM;IAAAM,QAAA,eACtBV,OAAA;MAAAU,QAAA,EAAIL;IAAO;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEtB;AAACZ,EAAA,CAlBQD,YAAY;EAAA,QACHH,aAAa;AAAA;AAAAiB,EAAA,GADtBd,YAAY;AAoBrB,eAAeA,YAAY;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}